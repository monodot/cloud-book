#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass memoir
\begin_preamble
\usepackage{graphicx, xcolor}

\makeatletter
\newlength{\numberheight}
\newlength{\barlength}
\makechapterstyle{veelo}{%
  \setlength{\afterchapskip}{40pt}
  \renewcommand*{\chapterheadstart}{\vspace*{40pt}}
  \renewcommand*{\afterchapternum}{\par\nobreak\vskip 25pt}
  \renewcommand*{\chapnamefont}{\normalfont\LARGE\flushright\color{magenta}}
  \renewcommand*{\chapnumfont}{\normalfont\HUGE}
  \renewcommand*{\chaptitlefont}{\normalfont\Huge\bfseries\flushright\color{cyan}}
  \renewcommand*{\printchaptername}{%
    \chapnamefont\scshape{\@chapapp}}
  \renewcommand*{\chapternamenum}{}
  \setlength{\beforechapskip}{18mm}
  \setlength{\midchapskip}{\paperwidth}
  \addtolength{\midchapskip}{-\textwidth}
  \addtolength{\midchapskip}{-\spinemargin}
  \renewcommand*{\printchapternum}{%
    \makebox[0pt][l]{\hspace{.8em}%
      \resizebox{!}{\beforechapskip}{\chapnumfont \thechapter}%
      \hspace{.8em}%
      \rule{\midchapskip}{\beforechapskip}%
    }}%
}
\makeatother
\chapterstyle{veelo}

% Add a page break before a section
\let\oldsection\section
\renewcommand\section{\clearpage\oldsection}

% Redefine emphasis as bold (cos there's no italic in Manrope font)
\let\emph\relax % there's no \RedeclareTextFontCommand
\DeclareTextFontCommand{\emph}{\bfseries\em}

% For circled numbers
\usepackage{tikz}
\newcommand*\circled[1]{\tikz[baseline=(char.base)]{
            \node[shape=circle,draw,inner sep=2pt] (char) {#1};}}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\begin_local_layout
# These settings just seem to change how it's rendered within LyX!

#Style Standard
#    Font
#        Family sans
#    EndFont
#End
\end_local_layout
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "lmodern" "Manrope3"
\font_sans "helvet" "Manrope3"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts true
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 12
\spacing double
\use_hyperref false
\papersize a4paper
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\backgroundcolor #fdeeed
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 3cm
\rightmargin 2cm
\bottommargin 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip bigskip
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle plain
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
A Brief Introduction to DevOps
\end_layout

\begin_layout Author
Tom Donohue ~ https://tomd.xyz
\end_layout

\begin_layout Date
June 2020
\end_layout

\begin_layout Section*
Hello
\end_layout

\begin_layout Standard
Creating software today is so frickin' complicated!
\end_layout

\begin_layout Standard
From the languages and frameworks we use, to the tools and applications
 that help us run our code, we're all drowning in a sea of options, terminology
 and confusion.
\end_layout

\begin_layout Standard
We’re often left to try to understand the big picture by hunting around
 forums, corporate marketing pieces and endless crappy blogs to grab a shred
 of understanding.
 
\end_layout

\begin_layout Standard
We don't want to look stupid in front of coworkers or customers, so we frantical
ly search for “interview questions” or snappy YouTube videos to try to absorb
 nuggets of information about what are usually pretty complex topics.
\end_layout

\begin_layout Standard
My idea in writing this short book is to give you a very easy-to-digest
 snapshot of one of the big topics in 2020: 
\series bold
DevOps
\series default
.
 It's designed to give you just enough information about to understand the
 basics, and give you inspiration for what to learn next.
\end_layout

\begin_layout Standard
Hope it's helpful for you.
\end_layout

\begin_layout Standard
Tom
\end_layout

\begin_layout Section*
What is DevOps?
\end_layout

\begin_layout Standard
What exactly is DevOps? You might hear people say things like:
\end_layout

\begin_layout Standard
\noindent
\align center
DevOps is a mindset! ...
 It’s a way of working! ...
 It’s culture!
\end_layout

\begin_layout Standard
It's also very confusing to find a good definition, because the term has
 been adopted by many tech companies to sell products.
 
\end_layout

\begin_layout Standard
So what actually is it?!
\end_layout

\begin_layout Standard
DevOps is a 
\series bold
way of thinking
\series default
 about how companies can deliver better software, quicker.
 
\end_layout

\begin_layout Standard
It promotes the idea that development and operations teams need to work
 more closely together, in order to make reliable software.
\end_layout

\begin_layout Standard
A DevOps mindset is about improving developers ability to get quality software
 into production, and increasing developers' involvement in how their applicatio
ns are run.
\end_layout

\begin_layout Standard
It's also about how using data and metrics to improve the quality of software
 and improve our ability to recover from faults.
 It's also about how to help operations teams handle applications that need
 to be released ever more frequently, sometimes many times a day.
\end_layout

\begin_layout Standard
DevOps is about thinking how we can deliver software more quickly, by valuing
 open culture, collaboration and constant improvement.
\end_layout

\begin_layout Section*
The Three Ways of DevOps
\end_layout

\begin_layout Standard
Since it’s a bit of a fuzzy concept, there isn't a definition which everyone
 agrees with.
\end_layout

\begin_layout Standard
But, fortunately, there are three guiding principles of DevOps, to help
 us figure it out.
 These were initially 
\begin_inset CommandInset href
LatexCommand href
name "devised by Gene Kim"
target "https://itrevolution.com/the-three-ways-principles-underpinning-devops/"
literal "false"

\end_inset

.
\end_layout

\begin_layout Subsection*
1.
 Improve Flow from business to customer
\end_layout

\begin_layout Standard
How can we improve the flow of our work, so that value is delivered to customers
 faster and smoother? (Value here means new software features.) For example,
 can we break down large, risky chunks of work into smaller pieces, so they
 can be delivered to the customer more often? Or could we automate some
 tasks that we do repeatedly?
\end_layout

\begin_layout Subsection*
2.
 Create and use feedback loops
\end_layout

\begin_layout Standard
DevOps says that we should collect data from the stages of software development,
 like coding, testing, deploying and monitoring.
 We then use that data as feedback on how well we're doing, spot any problems
 when they happen, give more confidence in the code we're building and improve
 the product.
 Feedback helps us measure our quality and go faster.
 For example, can we measure the sentiment of the team, or the quality of
 our code? How can we use that data to improve?
\end_layout

\begin_layout Standard
\begin_inset Wrap figure
lines 0
placement O
overhang 2cm
width "25col%"
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename nope.png
	lyxscale 10
	width 4cm

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
3.
 Learn and experiment continuously.
\end_layout

\begin_layout Standard
This means making time and space for learning, and using the things that
 we learn to make the system better overall.
 That might mean improvements to how we build software, or how we can make
 the app better for users.
 
\end_layout

\begin_layout Section*
The DevOps Loop
\end_layout

\begin_layout Standard
You might have seen people talk about DevOps and use a diagram like this.
 It's sometimes called the 
\begin_inset Quotes eld
\end_inset

DevOps Loop
\begin_inset Quotes erd
\end_inset

:
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Graphics
	filename devops-loop.png
	lyxscale 15
	width 85col%

\end_inset


\end_layout

\begin_layout Standard
This picture is a way of showing that building software isn't a linear process,
 
\series bold
it's a constant loop
\series default
.
\end_layout

\begin_layout Standard
When the first version of an application is released by developers, the
 work doesn't just stop there! The output from development goes into operations.
 And then any learnings and output from operations can go back into development.
 And so we go round the loop again...
\end_layout

\begin_layout Standard
So we can see that our job is never done.
 By going round this loop, we can make our product better and deliver more
 value.
\end_layout

\begin_layout Section*
What problem does DevOps try to solve?
\end_layout

\begin_layout Standard
The problem DevOps tries to solve is slowness to change.
\end_layout

\begin_layout Standard
Remember the recent spike in online grocery shopping, due to the coronavirus
 pandemic? Businesses needed to adapt fast!
\end_layout

\begin_layout Standard
But to adapt, companies usually need to change some parts of the software
 that runs their business.
 For example, they might need to add more servers to cope with demand.
\end_layout

\begin_layout Standard
This might seem easy - just tell the development and operations teams to
 do it! 
\end_layout

\begin_layout Standard
But, there's a problem: IT teams in companies are traditionally focused
 on providing stability (protecting the castle!), not quick delivery of
 new features.
\end_layout

\begin_layout Standard

\series bold
Operations 
\series default
teams want to keep applications stable and up-and-running (maintaining profit).
 But 
\series bold
development
\series default
 teams want to deliver new features quickly for the business (making more
 profit).
 These can seem like opposing goals.
\end_layout

\begin_layout Standard
The result is that delivering new features can often be slow and expensive.
 By the time a new feature is ready, the business opportunity might have
 already been missed.
\end_layout

\begin_layout Standard
DevOps tries to help companies deliver software that users want, faster.
 
\end_layout

\begin_layout Standard
DevOps promotes the idea that development and operations teams are critical
 in providing value to the business.
 So the right culture should be in place that allows those teams to deliver
 that value sooner and more predictably.
\end_layout

\begin_layout Section*
What are some examples of DevOps?
\end_layout

\begin_layout Standard
DevOps is about adopting culture and mindset, and not a specific set of
 rules.
 But if a company is adopting DevOps practices, you should be able to see
 some evidence of it, like these:
\end_layout

\begin_layout Itemize
Development and operations teams working closely together
\end_layout

\begin_layout Itemize
New versions of applications are released several times a month, or even
 several times a day
\end_layout

\begin_layout Itemize
Developers' code is automatically built and deployed, using scripts or pipelines
 
\end_layout

\begin_layout Itemize
Servers and infrastructure is built using automation scripts
\end_layout

\begin_layout Itemize
Applications are monitored by tools that collect and report information
 about application health
\end_layout

\begin_layout Itemize
Automated quality checks are run whenever new code is committed
\end_layout

\begin_layout Itemize
New features can move from idea into production very quickly
\end_layout

\begin_layout Itemize
Developers have more ownership of how their software is deployed and operated
\end_layout

\begin_layout Standard
There are many more examples than this! You'll be able to spot DevOps when
 you see it.
\end_layout

\begin_layout Section*
What's not good DevOps?
\end_layout

\begin_layout Standard
If a company isn't adopting DevOps fully, you might see that development
 and operations teams that don't work well together, and are siloed.
\end_layout

\begin_layout Standard
You might also see that features can take a very long time to go from idea
 into production, because they have to run through many stages, or are bounced
 from team to team.
\end_layout

\begin_layout Standard
If you see an operations team which has simply been renamed to the 
\begin_inset Quotes eld
\end_inset

DevOps team
\begin_inset Quotes erd
\end_inset

 - well, that just doesn't make any sense, and is the opposite of what DevOps
 is about! It's about better collaboration between existing teams, not just
 creating new ones.
\end_layout

\begin_layout Standard
Suspicion between teams, or a lack of knowledge-sharing, are also signs
 that DevOps culture isn't there yet.
\end_layout

\begin_layout Section*
So what techy things should you know?
\end_layout

\begin_layout Standard
DevOps is about people.
 It’s about enabling people to work together, and removing the barriers
 that stop them from doing so.
\end_layout

\begin_layout Standard
But now, the word DevOps is just as much associated with specific tools,
 as it is with culture.
 Lots of job ads today use the title 
\begin_inset Quotes eld
\end_inset

DevOps Engineer
\begin_inset Quotes erd
\end_inset

 and simply list a set of tools.
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Graphics
	filename devops-loop-with-tools.png
	lyxscale 15
	width 98col%

\end_inset


\end_layout

\begin_layout Standard
So while it's good to understand the concept of DevOps, it also makes sense
 to understand some of the tools that are used by DevOps teams.
 
\end_layout

\begin_layout Standard
These tools are often called 
\begin_inset Quotes eld
\end_inset

DevOps tools
\begin_inset Quotes erd
\end_inset

 because they help with DevOps principles.
 They mostly make it easier to share things, collect data or to automate
 things.
\end_layout

\begin_layout Subsection*
Project management and collaboration
\end_layout

\begin_layout Standard
These tools help teams to share and track progress on projects or communicate
 in real time, even if people aren't physically near each other.
 This makes it easier for development and operations teams to know what
 each other is doing.
 It also helps the business see when new features are ready.
 
\end_layout

\begin_layout Standard
Examples: JIRA, Trello, Slack
\end_layout

\begin_layout Subsection*
Code: writing quality software
\end_layout

\begin_layout Standard
Developers need tools that allow them to work on code together, without
 having to copy it onto memory sticks or send over email! They also need
 features that allow them to work on the same code at the same time.
\end_layout

\begin_layout Standard
Examples: GitHub, Bitbucket, GitLab
\end_layout

\begin_layout Subsection*
Build: continuous integration & CI/CD
\end_layout

\begin_layout Standard
Good continuous integration is essential for DevOps.
 These tools are used to automate the process of compile code, run tests,
 and deploy the application.
 This means that the same process can be run dozens of times per day without
 effort.
\end_layout

\begin_layout Standard
Examples: Jenkins, Travis, GitLab, Circle CI, Azure DevOps
\end_layout

\begin_layout Subsection*
Deploy: configuration management & provisioning
\end_layout

\begin_layout Standard
These tools are used to create the environments where applications will
 be deployed.
 They might configure servers, install software, or create objects in the
 cloud.
 They are controlled using code.
 This means that environments can be created at the touch of a button.
\end_layout

\begin_layout Standard
Examples: Ansible, Terraform
\end_layout

\begin_layout Subsection*
Operate: run the application
\end_layout

\begin_layout Standard
When an application is built, it is then deployed onto a server or a cloud
 platform.
 These platforms run the applications.
 
\end_layout

\begin_layout Standard
Examples: Kubernetes, Amazon EC2
\end_layout

\begin_layout Subsection*
Monitor
\end_layout

\begin_layout Standard
Applications need to be checked and observed to make sure they are running
 OK.
 Monitoring tools allow this information to be collected and reported, perhaps
 on dashboards or sent to a chatroom.
 This data is also useful to figure out where the application is performing
 well, and what could be improved (potential features to go back into the
 loop).
\end_layout

\begin_layout Standard
Examples: Prometheus, Splunk, Grafana
\end_layout

\begin_layout Section*
How do I get started with DevOps?
\end_layout

\begin_layout Standard
DevOps isn’t a tool, a methodology, or a product, or a service that you
 can buy.
 It’s not really meant to be a job title, or a team either!
\end_layout

\begin_layout Standard
It’s a mindset, or a way of thinking about how teams can collaborate and
 work together.
 You might be doing this already without having “DevOps” in your job title
 or team name.
\end_layout

\begin_layout Standard
You can start doing DevOps by doing things like:
\end_layout

\begin_layout Itemize
Collaborating more openly with other teams, sharing your successes and failures
 so that others can improve
\end_layout

\begin_layout Itemize
Looking at your current software development process, finding the bottleneck
 (the part of the process that is difficult or takes a long time) and trying
 to improve it.
\end_layout

\begin_layout Itemize
Automating manual tasks, to give more confidence in your deployments and
 server builds
\end_layout

\begin_layout Itemize
Writing tests to check the quality of your code, so that it can be measured
 and continually improved
\end_layout

\begin_layout Itemize
Using a tool to automatically compile and test your code, like Jenkins
\end_layout

\begin_layout Itemize
Gather feedback from end users about the application, so that their ideas
 can go back into the loop and be developed as new features
\end_layout

\begin_layout Chapter*
Thanks
\end_layout

\begin_layout Standard
Thanks for reading! 
\end_layout

\begin_layout Standard
If you found this useful then please share with your coworkers and let me
 know by sending me a quick message on Twitter.
 I would love to know what you think.
 I'm 
\begin_inset CommandInset href
LatexCommand href
name "@monodot"
target "https://twitter.com/monodot"
literal "false"

\end_inset

.
\end_layout

\begin_layout Standard
Photos and illustrations are courtesy of:
\end_layout

\begin_layout Itemize
Hand vector created by gohsantosa2 at 
\begin_inset CommandInset href
LatexCommand href
name "www.freepik.com"
target "https://www.freepik.com"
literal "false"

\end_inset


\end_layout

\begin_layout Itemize
Background vector created by starline at 
\begin_inset CommandInset href
LatexCommand href
name "www.freepik.com"
target "https://www.freepik.com"
literal "false"

\end_inset


\end_layout

\begin_layout Standard
(c) 2020 Tom Donohue
\end_layout

\end_body
\end_document
